# -*- coding: utf-8 -*-
"""Copy of SaratogaWinter_SentimentAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I0wI5vwYRyocjjiAa4xDUkXvSb6SS7-Z

Copyright (c) 2022-2023 AIClub

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without
limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
OR OTHER DEALINGS IN THE SOFTWARE.

# Setting up OpenAI
"""

!pip install openai

from openai import OpenAI
import json

"""## API keys

Please get them from: https://platform.openai.com/account/api-keys


"""

from getpass import getpass

client = OpenAI(
  api_key=getpass('Enter your OpenAI key: ')
)

print(client.api_key)

"""# Sentiment analysis"""

def simple_classify(input_string: str, prompt_string:str) -> str:

  completion = client.completions.create(model='gpt-3.5-turbo-instruct',
                                         prompt=f"{prompt_string}: {input_string}")
  response=completion.choices[0].text
  print(f"For {input_string}, response is:\n----------{response}\n=============")
  #print(dict(completion).get('usage'))
  #print(completion.model_dump_json(indent=2))
  return response

print("*******")
r=simple_classify("I am not happy.","What is the sentiment of")
r=simple_classify("I am not happy.","Is this sentiment happy or sad?")
r=simple_classify("I do not hate the good pizza.","Is this sentiment happy or sad?")
r=simple_classify("""
As a former barista myself I had some hesitations about investing in an Espresso machine that has almost an entire PLASTIC build but with the sale price and Gevi Grinder thrown in for good measure, I was game.

WOW ! Impressive, sturdy, well constructed and compact are just a few words to describe this Little Wonder In My Kitchen.

Unboxing was easy. Set up instructions for both Espresso machine and grinder are straight forward, orderly and complete. Operation was a snap with variable adjustments to both machines which allow a suitable level of pressure and grinding selections for anyone’s taste.

For the budget conscience and espresso savvy I’d recommend this package above other higher priced options.

As an added bonus Gevi provides a library of FREE instructional videos on their webpage and YouTube.
""","Please rate the customer sentiment on a scale of 1-10, 1 being very happy and 10 being very unhappy.")
print("******")

"""## Using OpenAI functions"""

def function_classify(input_string: str) -> str:
    functions = [{
        "name": "print_sentiment",
        "description": "A function that prints the given sentiment",
        "parameters": {
            "type": "object",
            "properties": {
                "sentiment": {
                    "type": "string",
                    "enum": ["happy", "sad","very happy","neutral"],
                    "description": "The sentiment."
                },
            }, "required": ["sentiment"],
        }
    }]
    messages = [{"role": "user", "content": input_string}]
    response = client.chat.completions.create(model="gpt-3.5-turbo", messages=messages, functions=functions, function_call={"name": "print_sentiment"})
    #print(f"Response is: {response}")
    function_call = response. choices [0].message.function_call
    #print(f"Function call is: {function_call}")
    argument = json.loads(function_call.arguments)
    #print(f"Response function parameters are: {argument}")
    return argument

function_classify("I am happy.")